{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","utils/constants.ts","utils/helpers.ts","index.tsx"],"names":["TodoList","memo","todos","handleSelectedTodo","selectedTodoById","className","map","id","title","completed","isSelectedTodo","classNames","type","onClick","TodoFilter","query","onChangeQuery","onChangeFilterType","onChange","event","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","catch","error","Error","message","getUser","userId","TodoModal","handleCloseModal","selectedTodo","useState","isLoading","setIsLoading","setError","user","setUser","fetchUsers","a","useEffect","display","padding","width","backgroundColor","textAlign","color","href","email","name","App","setTodos","setQuery","sortType","setSortType","setSelectedTodoById","visibleTodos","filter","searchValue","toLocaleLowerCase","includes","trim","todo","getFilteredTodos","fetchTodos","useMemo","find","useCallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7bf0c820.chunk.js","sourcesContent":["import { FC, memo } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface TodoListProps {\n  todos: Todo[];\n  selectedTodoById: number;\n  handleSelectedTodo: (id: number) => void;\n}\n\nexport const TodoList: FC<TodoListProps> = memo(({\n  todos,\n  handleSelectedTodo,\n  selectedTodoById,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n\n        <th>Title</th>\n\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(({\n        id,\n        title,\n        completed,\n      }) => {\n        const isSelectedTodo = selectedTodoById === id;\n\n        return (\n          <tr\n            key={id}\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': isSelectedTodo,\n            })}\n          >\n            <td className=\"is-vcentered\">{id}</td>\n\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames(\n                'has-text-success',\n                { 'has-text-danger': !completed },\n              )}\n              >\n                {title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => handleSelectedTodo(id)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames({\n                    'far fa-eye': !isSelectedTodo,\n                    'far fa-eye-slash': isSelectedTodo,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n));\n","import { FC } from 'react';\n\ninterface TodoFilterProps {\n  query: string;\n  onChangeQuery: (value: string) => void;\n  onChangeFilterType: (sortType: string) => void;\n}\n\nexport const TodoFilter: FC<TodoFilterProps> = ({\n  query,\n  onChangeQuery,\n  onChangeFilterType,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => onChangeFilterType(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => onChangeQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span\n            className=\"icon is-right\"\n            style={{ pointerEvents: 'all' }}\n          >\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onChangeQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst BASE_URL\n  = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json())\n    .catch((error) => {\n      throw new Error(error.message);\n    });\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { FC, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ninterface TodoModalProps {\n  handleCloseModal: () => void;\n  selectedTodo: Todo;\n}\n\nexport const TodoModal: FC<TodoModalProps> = ({\n  handleCloseModal,\n  selectedTodo,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  const {\n    title,\n    completed,\n    userId,\n    id,\n  } = selectedTodo;\n\n  const fetchUsers = async () => {\n    setIsLoading(true);\n\n    try {\n      setUser(await getUser(userId));\n    } catch {\n      setError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, [selectedTodo]);\n\n  return (\n    <div\n      className=\"modal is-active\"\n      data-cy=\"modal\"\n    >\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseModal}\n            />\n          </header>\n\n          {error\n            ? (\n              <p style={{\n                display: 'block',\n                padding: '20px',\n                width: '100%',\n                backgroundColor: 'white',\n                textAlign: 'center',\n                color: 'darkred',\n              }}\n              >\n                Something went wrong! 🗿\n              </p>\n            )\n            : (\n              <div className=\"modal-card-body\">\n                <p\n                  className=\"block\"\n                  data-cy=\"modal-title\"\n                >\n                  {title}\n                </p>\n\n                <p className=\"block\" data-cy=\"modal-user\">\n                  <strong className={classNames(\n                    'has-text-danger',\n                    { 'has-text-success': completed },\n                  )}\n                  >\n                    {completed\n                      ? 'Done'\n                      : 'Planned'}\n                  </strong>\n\n                  {' by '}\n\n                  {user && (\n                    <a href={`mailto:${user.email}`}>\n                      {user.name}\n                    </a>\n                  )}\n                </p>\n              </div>\n            )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { getFilteredTodos } from './utils/helpers';\nimport { ALL, DEFAULT_TODO_ID } from './utils/constants';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [sortType, setSortType] = useState(ALL);\n  const [selectedTodoById, setSelectedTodoById] = useState(DEFAULT_TODO_ID);\n\n  const visibleTodos = getFilteredTodos(todos, sortType, query);\n\n  const fetchTodos = async () => {\n    setIsLoading(true);\n\n    try {\n      setTodos(await getTodos());\n    } catch {\n      setError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const selectedTodo = useMemo(() => (\n    todos.find(({ id }): boolean => id === selectedTodoById)\n  ), [selectedTodoById]);\n\n  const handleSelectedTodo = useCallback((id: number) => {\n    setSelectedTodoById(id);\n  }, []);\n\n  const handleCloseModal = useCallback(() => {\n    setSelectedTodoById(DEFAULT_TODO_ID);\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onChangeQuery={setQuery}\n                onChangeFilterType={setSortType}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <>\n                    {error && (\n                      <p style={{ color: 'darkred' }}>\n                        Error: Unable to establish a connection with the server.\n                      </p>\n                    )}\n\n                    <TodoList\n                      todos={visibleTodos}\n                      selectedTodoById={selectedTodoById}\n                      handleSelectedTodo={handleSelectedTodo}\n                    />\n                  </>\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          handleCloseModal={handleCloseModal}\n          selectedTodo={selectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","export const ALL = 'all';\nexport const ACTIVE = 'active';\nexport const COMPLETED = 'completed';\nexport const DEFAULT_TODO_ID = 0;\n","import { Todo } from '../types/Todo';\nimport { ACTIVE, COMPLETED } from './constants';\n\nexport const findCurrentTodo = (\n  title: string,\n  searchValue: string,\n): boolean => {\n  return title.toLocaleLowerCase()\n    .includes(searchValue.toLocaleLowerCase().trim());\n};\n\nexport const getFilteredTodos = (\n  todos: Todo[],\n  sortType: string,\n  query: string,\n) => {\n  const visibleTodos = todos\n    .filter(({ title }) => findCurrentTodo(title, query));\n\n  return visibleTodos.filter(todo => {\n    switch (true) {\n      case sortType === ACTIVE:\n        return !todo.completed;\n\n      case sortType === COMPLETED:\n        return todo.completed;\n\n      default:\n        return todo;\n    }\n  });\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}